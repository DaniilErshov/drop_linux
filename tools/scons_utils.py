"""Utility functions and classes for scons files."""

import glob
import re
import os
import string
import subprocess


INIT_CC_FLAGS = ' -O2 -Wall -Werror -Wextra -Wno-unused-parameter -Wno-sign-compare'
INIT_FORTRAN_FLAGS = ' -O2 -finit-real=zero'  # TODO -Wall -Werror
CC_DEBUG_FLAGS = ' -fno-rtti -fno-exceptions -march=native -fsignaling-nans -D_GLIBCXX_DEBUG -DENABLE_DEBUG_CHECKS'
FORTRAN_DEBUG_FLAGS = ' -fbounds-check -fcheck=all -ffpe-trap=invalid,zero,overflow -fsignaling-nans'
PROD_FLAG = ' -fno-rtti -fno-exceptions -march=native -funroll-loops'
DROPLET_FLAG = ' -fno-rtti -fexceptions -march=native -funroll-loops'
#ASAN_FLAGS = ' -fsanitize=undefined'
ASAN_FLAGS = ' -fsanitize=address'

INTEL_ZERO_TRANSFORM = (' -finit-real=zero', ' -zero')
INTEL_FORTRAN_WARN_TRANSFORM = (' -fbounds-check -fcheck=all -ffpe-trap=invalid,zero,overflow', '')
APPLE_INTEL_NANS_TRANSFORM = (' -fsignaling-nans', '')
APPLE_PROFILER_TRANSFORM = (' -DENABLE_PROFILER', '')
ADDITIONAL_WARNINGS = '' # ' -Wconversion' TODO
PROD_SANDBOX_WITH_DEBUG_REPO = ' -D_GLIBCXX_DEBUG -fsignaling-nans -DENABLE_DEBUG_CHECKS'
PROD_SANDBOX_WITH_DEBUG_REPO_TRANSFORM = ('-fno-rtti', '')


def _ParseSvnRevision(cmd):
    p = subprocess.Popen(cmd, shell=True,
                         stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, close_fds=True)
    text = p.stdout.read().strip()
    SVN_REVISION_RE = re.compile('Revision: (\\d+)\n', re.MULTILINE)
    m = SVN_REVISION_RE.search(text)
    if m:
        return m.group(1)
    else:
        return None


def _WritePlatformSpec():
    hostname = subprocess.Popen('hostname', shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE).stdout.read().strip()
    march_full = subprocess.Popen('uname -a', shell=True, stdout=subprocess.PIPE, stderr=None).stdout.read().strip()
    repo_rev = _ParseSvnRevision('svn info .')
    if repo_rev is None:
        repo_rev = _ParseSvnRevision('git svn info .')
    sandbox_rev = None
    if os.path.isdir('sandbox'):
        sandbox_rev = _ParseSvnRevision('svn info sandbox/')
        if sandbox_rev is None:
            sandbox_rev = _ParseSvnRevision('git svn info sandbox/')
    if repo_rev:
        f = open('.platform_spec.h', 'w')
        print >>f, '// This file is auto-generated.'
        print >>f, '#define PLATFORM_SPEC_HOSTNAME "%s"' % hostname
        print >>f, '#define PLATFORM_SPEC_MARCH "%s"' % march_full
        print >>f, '#define PLATFORM_SPEC_REPO_REV "%s"' % repo_rev
        if sandbox_rev:
            print >>f, '#define PLATFORM_SPEC_SANDBOX_REV "%s"' % sandbox_rev
        f.close()
    return bool(repo_rev)


def FortranIncBuilderFunction(env, target, source):
    output_file = open(str(target[0]), 'w')
    output_file.write('// Autogenerated file with fortran consts from .inc file.\n')
    for line in open(str(source[0])).readlines():
        m = re.match('^\s*parameter\s*\((\w+)\s*=\s*(\d+)\).*$', line.lower())
        if m:
            output_file.write('const int FORTRAN_INC_%s = %s;\n' % (m.group(1), m.group(2)))


def SconsCleanHandler():
    os.system('rm -f bin/* bin/tests/*')
    os.system('rm -f `find . -name \\*.o`')
    os.system('rm -f `find . -name \\*.os`')
    os.system('rm -f `find . -name \\*.a | grep -v ./3rd-party/ | grep -v ./prebuild`')
    os.system('rm -f `find . -name \\*.so | grep -v ./3rd-party/ | grep -v ./prebuild`')
    os.system('rm -f `find . -name \\*.a | grep -v ./3rd-party/ | grep -v ./prebuild`')


class PlatformSpec(object):
    """Specifications for target platform."""

    def __init__(self, env, options):
        self.use_fake_mpi_everywhere = False
        self.use_dlsode_with_mkl = False
        self.ar = 'ar'
        self.link = 'mpicxx'
        self.plain_linker = 'gcc'
        self.cxx = 'mpicxx'
        self.fortran = 'mpif77'
        self.system_libs = ['pthread', 'stdc++', 'm']
        self.third_party_libs = []
        self.ccflags = INIT_CC_FLAGS
        self.fortranflags = INIT_FORTRAN_FLAGS
        self.linkflags = ''
        self.mpi_linkflags = ''

        if (env.GetOption('lim_debug') and
            not env.GetOption('evil_restriction') and
            not env.GetOption('prod_sandbox_with_debug_repo')):
            self.ccflags += ' -g2' + CC_DEBUG_FLAGS
            self.fortranflags += ' -g' + FORTRAN_DEBUG_FLAGS
        elif (env.GetOption('droplet_custom')):
            self.ccflags += ' -g0' + DROPLET_FLAG
        else:
            self.ccflags += ' -g0' + PROD_FLAG
            self.fortranflags += ' -g0'

        if env.GetOption('evil_restriction'):
            assert not env.GetOption('lim_debug')
            self.ccflags += ' -DEVIL_RESTRICTION'

        if env.GetOption('prod_sandbox_with_debug_repo'):
            assert not env.GetOption('lim_debug')
            self.ccflags += PROD_SANDBOX_WITH_DEBUG_REPO
            self.TransformOptions(PROD_SANDBOX_WITH_DEBUG_REPO_TRANSFORM)

        if env.GetOption('enable_adaptation'): self.ccflags += ' -DENABLE_ADAPTATION'
        if env.GetOption('enable_rebalancing'): self.ccflags += ' -DENABLE_REBALANCING'
        if env.GetOption('enable_liggghts'): self.ccflags += ' -DENABLE_LIGGGHTS'
        if _WritePlatformSpec(): self.ccflags += ' -DPLATFORM_SPEC'
        self.num_jobs = 4

    def FixLibsFiles(self, File):
        def _fixer(s):
            if s.endswith('.o') or s.endswith('.a') or s.endswith('.lib'): return File(s)
            return s
        self.system_libs = map(_fixer, self.system_libs)
        self.third_party_libs = map(_fixer, self.third_party_libs)

    def TransformOptions(self, trans):
        self.ccflags = self.ccflags.replace(trans[0], trans[1])
        self.fortranflags = self.fortranflags.replace(trans[0], trans[1])


class PlatformSpecCluster(PlatformSpec):
    """Specifications for clusters."""

    def __init__(self, env, options):
        if env.GetOption('lim_debug'):
            print 'NOTE: normally you shouldn\'t build debug version of code on clusters.'
        PlatformSpec.__init__(self, env, options)
        self.system_libs.append('ifcore')
        self.TransformOptions(INTEL_ZERO_TRANSFORM)
        self.TransformOptions(INTEL_FORTRAN_WARN_TRANSFORM)
        self.TransformOptions(APPLE_INTEL_NANS_TRANSFORM)
        self.plain_linker = 'icc'
        if env.GetOption('droplet_custom'):
            self.ccflags += ' -fiopenmp'
            self.ccflags += ' -I./3rd-party/ChemKinReader/include -I./3rd-party/Boost_regex/include'
            self.ccflags += ' -I./3rd-party/SUNDIALS/SUNDIALS_6_5_1/sundials-6.5.1/include -I./3rd-party/SUNDIALS/SUNDIALS_6_5_1/sundials-6.5.1-x86_64/include'
            self.third_party_libs = [
                    '3rd-party/ChemKinReader/ChemKinReader.a',
		            '3rd-party/SUNDIALS/SUNDIALS_6_5_1/sundials-6.5.1-x86_64/src/cvode/libsundials_cvode.a',
                    '3rd-party/SUNDIALS/SUNDIALS_6_5_1/sundials-6.5.1-x86_64/src/ida/libsundials_ida.a',
                    '3rd-party/SUNDIALS/SUNDIALS_6_5_1/sundials-6.5.1-x86_64/src/kinsol/libsundials_kinsol.a',
                    '3rd-party/SUNDIALS/SUNDIALS_6_5_1/sundials-6.5.1-x86_64/src/nvector/openmp/libsundials_nvecopenmp.a']
            self.system_libs.append('iomp5')
        else:
            self.third_party_libs = [
                '3rd-party/libcgns_3.3.0-x86_64.a',
                '3rd-party/metis/libmetis_5.1.0-x86_64.a',
                '3rd-party/metis/libparmetis_4.0.3-x86_64_JSCC.a',
                '3rd-party/libANN_1.1.2-x86_64.a']
        self.system_libs += ['imf', 'irc', 'svml']
        # MKL on cluster only.
        self.use_dlsode_with_mkl = True
        self.ccflags += ' -mkl=sequential'
        self.fortranflags += ' -mkl=sequential'
        self.linkflags += ' -mkl=sequential'
        self.num_jobs = 6


class PlatformSpecMVS1P5(PlatformSpecCluster):
   """Specifications for MVS1P5."""

   def __init__(self, env, options):
       PlatformSpecCluster.__init__(self, env, options)
       self.cxx = 'mpiicc'
       self.fortran = 'mpiifort'
       self.link = 'mpiicc'
       self.ccflags += ' -std=c++17'


class PlatformSpecNotCluster(PlatformSpec):
    """Base specifications for not cluster setup."""

    def __init__(self, env, options):
        PlatformSpec.__init__(self, env, options)
        self.ccflags += ADDITIONAL_WARNINGS
        self.system_libs.append('gfortran')
        if env.GetOption('lim_debug'):
          self.system_libs.append('profiler')
          self.ccflags += ' -DENABLE_PROFILER'
        self.ccflags += ' -std=c++17'
        if env.GetOption('enable_file_logging'):
          self.ccflags += ' -DLOG_TO_FILE'


class PlatformSpecArmDebian(PlatformSpecNotCluster):
    """Specifications for Arm-debian."""

    def __init__(self, env, options):
        PlatformSpecNotCluster.__init__(self, env, options)
        print 'NOTE: Not using MKL!'
        self.ccflags += ' -DUSE_DUMB_MATRIX_SOLVE'
        self.third_party_libs = [
                '3rd-party/aarch64/libcgns_3.3.0.a',
                '3rd-party/aarch64/libmetis_5.1.0.a',
                '3rd-party/aarch64/libANN_1.1.2.a']
        if env.GetOption('lim_debug'):
          self.linkflags += ' -rdynamic'


class PlatformSpecApple(PlatformSpecNotCluster):
    """Specifications for Apple."""

    def __init__(self, env, options):
        PlatformSpecNotCluster.__init__(self, env, options)
        print 'NOTE: Not using MKL!'
        self.ccflags += ' -DUSE_DUMB_MATRIX_SOLVE'
        self.plain_linker = 'mpicc'
        self.TransformOptions(APPLE_INTEL_NANS_TRANSFORM)
        self.TransformOptions(APPLE_PROFILER_TRANSFORM)
        gfortran_home = '/Users/aildar/.homebrew/Cellar/gcc/7.2.0/lib/gcc/7/'
        if 'profiler' in self.system_libs: self.system_libs.remove('profiler')
        if 'gfortran' in self.system_libs: self.system_libs.remove('gfortran')
        self.system_libs += [gfortran_home + 'libgfortran.a',
                             gfortran_home + 'libquadmath.a',
                             gfortran_home + 'gcc/x86_64-apple-darwin16.7.0/7.2.0/libgcc.a']
        self.third_party_libs = ['3rd-party/libcgns_3.1.3-apple.a',
                                 '3rd-party/metis/libmetis_5.0.2-apple.a',
                                 '3rd-party/metis/libparmetis_4.0.3-apple.a',
                                 '3rd-party/libANN_1.1.2-apple.a']
        self.mpi_linkflags = ''
        self.linkflags += ' -L/Users/aildar/.homebrew/lib/'
        if env.GetOption('enable_liggghts'):
            self.third_party_libs.append('3rd-party/libliggghts_3.1.0-apple.a')
        #self.ccflags += ASAN_FLAGS
        #self.linkflags += ASAN_FLAGS


class PlatformSpecDeb64(PlatformSpecNotCluster):
    """Specifications for Deb64."""

    def __init__(self, env, options):
        PlatformSpecNotCluster.__init__(self, env, options)
        self.ccflags += ' -DUSE_DUMB_MATRIX_SOLVE'
        # TODO openblas_read_env uses 75% of CPU?!
        #self.use_dlsode_with_mkl = True
        #self.ccflags += ' -DUSE_OPENBLAS'
        #self.system_libs.append('openblas')
        if env.GetOption('droplet_custom'):
            self.ccflags += ' -I./3rd-party/ChemKinReader/include -I./3rd-party/Boost_regex/include'
            self.ccflags += ' -I./3rd-party/SUNDIALS/SUNDIALS_6_5_1/sundials-6.5.1/include -I./3rd-party/SUNDIALS/SUNDIALS_6_5_1/sundials-6.5.1-x86_64/include'
            self.third_party_libs = [
                    '3rd-party/ChemKinReader/ChemKinReader.a',
                    '3rd-party/SUNDIALS/SUNDIALS_6_5_1/sundials-6.5.1-x86_64/src/cvode/libsundials_cvode.a'
                    '3rd-party/SUNDIALS/SUNDIALS_6_5_1/sundials-6.5.1-x86_64/src/ida/libsundials_ida.a',
                    '3rd-party/SUNDIALS/SUNDIALS_6_5_1/sundials-6.5.1-x86_64/src/kinsol/libsundials_kinsol.a',
                    '3rd-party/SUNDIALS/SUNDIALS_6_5_1/sundials-6.5.1-x86_64/src/nvector/serial/libsundials_nvecserial.a']
        else:
            self.third_party_libs = [
                    '3rd-party/libcgns_3.3.0-x86_64.a',
                    '3rd-party/metis/libmetis_5.1.0-x86_64.a',
                    '3rd-party/metis/libparmetis_4.0.3-x86_64.a',
                    '3rd-party/libANN_1.1.2-x86_64.a']
            if env.GetOption('enable_liggghts'):
                self.mpi_linkflags += ' -Wl,--whole-archive 3rd-party/libliggghts_3.0.2-ompi-x86_64.a -Wl,--no-whole-archive'
            if env.GetOption('lim_debug'):
                #self.ccflags += ASAN_FLAGS
                #self.linkflags += ASAN_FLAGS
                self.linkflags += ' -rdynamic'


class PlatformSpecMs64(PlatformSpecNotCluster):
    """Specifications for MS."""

    def __init__(self, env, options):
        PlatformSpecNotCluster.__init__(self, env, options)
        self.ccflags += ' -DUSE_DUMB_MATRIX_SOLVE'
        self.use_dlsode_with_mkl = False
        self.third_party_libs = [
                '3rd-party/libcgns_3.3.0-x86_64.a',
                '3rd-party/metis/libmetis_5.1.0-x86_64.a',
                '3rd-party/metis/libparmetis_4.0.3-x86_64.a',
                '3rd-party/libANN_1.1.2-x86_64.a']
        if env.GetOption('enable_liggghts'):
            self.mpi_linkflags += ' -Wl,--whole-archive 3rd-party/libliggghts_3.0.2-ompi-x86_64.a -Wl,--no-whole-archive'
        if env.GetOption('lim_debug'):
            #self.ccflags += ASAN_FLAGS
            #self.linkflags += ASAN_FLAGS
            self.linkflags += ' -rdynamic'


def AutoconfigurePlatformSpec(env):
    hostname = subprocess.Popen('hostname', shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE).stdout.read().strip()
    hostname_f = subprocess.Popen('hostname -f', shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE).stdout.read().strip()
    march = subprocess.Popen('uname -m', shell=True, stdout=subprocess.PIPE, stderr=None).stdout.read().strip()
    uname = subprocess.Popen('uname', shell=True, stdout=subprocess.PIPE, stderr=None).stdout.read().strip()
    uname_all = subprocess.Popen('uname -a', shell=True, stdout=subprocess.PIPE, stderr=None).stdout.read().strip()
    options = {}
    if hostname_f.find('jscc') >= 0:
        assert march == 'x86_64'
        return PlatformSpecMVS1P5(env, options)
    elif uname.find('Darwin') >= 0:
        assert march == 'x86_64'
        return PlatformSpecApple(env, options)
    elif march == 'aarch64':
        return PlatformSpecArmDebian(env, options)
    elif march == 'x86_64':
        if uname_all.find('Microsoft') >= 0:
            return PlatformSpecMs64(env, options)
        else:
            return PlatformSpecDeb64(env, options)

    return None


def ApplyToEnv(platform_spec, env, File):
    platform_spec.FixLibsFiles(File)
    env['AR'] = platform_spec.ar
    env['LINK'] = platform_spec.link
    env['CXX'] = platform_spec.cxx
    env['FORTRAN'] = platform_spec.fortran
    env['CPPPATH'] = '#'
    env.Append(CCFLAGS=platform_spec.ccflags)
    env.Append(FORTRANFLAGS=platform_spec.fortranflags)
    env.Append(LINKFLAGS=platform_spec.linkflags)
